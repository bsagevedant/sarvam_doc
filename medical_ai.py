import re
from typing import Dict, List, Optional, Tuple
from config import Config

class MedicalAI:
    """Medical AI consultation system"""
    
    def __init__(self):
        self.medical_knowledge = self._load_medical_knowledge()
        self.symptom_patterns = self._load_symptom_patterns()
        self.emergency_keywords = [
            'chest pain', 'difficulty breathing', 'unconscious', 'severe bleeding',
            'heart attack', 'stroke', 'poisoning', 'emergency', 'urgent',
            'рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж', 'рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл', 'рдмреЗрд╣реЛрд╢реА', 'рдЦреВрди рдмрд╣рдирд╛',
            'рд╣рд╛рд░реНрдЯ рдЕрдЯреИрдХ', 'рд╕реНрдЯреНрд░реЛрдХ', 'рдЗрдорд░рдЬреЗрдВрд╕реА', 'рдЬрд░реВрд░реА', 'рддреБрд░рдВрдд'
        ]
    
    def _load_medical_knowledge(self) -> Dict:
        """Load medical knowledge base"""
        return {
            'fever': {
                'symptoms': ['high temperature', 'chills', 'sweating', 'headache'],
                'causes': ['viral infection', 'bacterial infection', 'immune response'],
                'advice': 'Rest, stay hydrated, take paracetamol if needed',
                'emergency': 'Fever above 103┬░F or lasting more than 3 days'
            },
            'headache': {
                'symptoms': ['head pain', 'pressure', 'throbbing'],
                'causes': ['stress', 'dehydration', 'sleep deprivation', 'migraine'],
                'advice': 'Rest in dark room, stay hydrated, gentle head massage',
                'emergency': 'Sudden severe headache, vision changes, or neck stiffness'
            },
            'cough': {
                'symptoms': ['persistent coughing', 'throat irritation', 'phlegm'],
                'causes': ['cold', 'allergies', 'respiratory infection'],
                'advice': 'Stay hydrated, honey and warm water, avoid irritants',
                'emergency': 'Coughing blood or severe breathing difficulty'
            },
            'stomach_pain': {
                'symptoms': ['abdominal pain', 'nausea', 'cramping'],
                'causes': ['indigestion', 'food poisoning', 'stress', 'gastritis'],
                'advice': 'Light diet, avoid spicy foods, stay hydrated',
                'emergency': 'Severe pain, vomiting blood, or high fever'
            },
            'cold': {
                'symptoms': ['runny nose', 'sneezing', 'sore throat', 'congestion'],
                'causes': ['viral infection', 'weakened immunity'],
                'advice': 'Rest, warm liquids, steam inhalation, vitamin C',
                'emergency': 'High fever or difficulty breathing'
            }
        }
    
    def _load_symptom_patterns(self) -> Dict:
        """Load symptom detection patterns"""
        return {
            'fever': [
                r'fever|temperature|рдмреБрдЦрд╛рд░|рдЬреНрд╡рд░|рддрд╛рдкрдорд╛рди',
                r'hot|burning|рдЧрд░реНрдо|рдЬрд▓рди'
            ],
            'headache': [
                r'headache|head.*pain|рд╕рд┐рд░рджрд░реНрдж|рд╕рд┐рд░.*рджрд░реНрдж',
                r'migraine|рдорд╛рдЗрдЧреНрд░реЗрди'
            ],
            'cough': [
                r'cough|coughing|рдЦрд╛рдВрд╕реА|рдХрдл',
                r'throat.*pain|рдЧрд▓реЗ.*рджрд░реНрдж'
            ],
            'stomach_pain': [
                r'stomach.*pain|belly.*pain|рдкреЗрдЯ.*рджрд░реНрдж|рдЙрджрд░.*рджрд░реНрдж',
                r'nausea|vomit|рдЙрд▓реНрдЯреА|рдорддрд▓реА'
            ],
            'cold': [
                r'cold|runny.*nose|рдирд╛рдХ.*рдмрд╣рдирд╛|рдЬреБрдХрд╛рдо|рд╕рд░реНрджреА',
                r'sneezing|рдЫреАрдВрдХ|рдирд╛рдХ.*рдЬрд╛рдо'
            ]
        }
    
    def detect_symptoms(self, query: str) -> List[str]:
        """Detect symptoms from user query"""
        query_lower = query.lower()
        detected_symptoms = []
        
        for symptom, patterns in self.symptom_patterns.items():
            for pattern in patterns:
                if re.search(pattern, query_lower, re.IGNORECASE):
                    detected_symptoms.append(symptom)
                    break
        
        return detected_symptoms
    
    def check_emergency(self, query: str) -> bool:
        """Check if query indicates emergency situation"""
        query_lower = query.lower()
        for keyword in self.emergency_keywords:
            if keyword.lower() in query_lower:
                return True
        return False
    
    def generate_medical_response(self, query: str, detected_language: str) -> str:
        """Generate medical response based on query and detected symptoms"""
        
        # Check for emergency
        if self.check_emergency(query):
            return self._generate_emergency_response(detected_language)
        
        # Detect symptoms
        symptoms = self.detect_symptoms(query)
        
        if not symptoms:
            return self._generate_general_response(query, detected_language)
        
        # Generate response for detected symptoms
        return self._generate_symptom_response(symptoms, detected_language)
    
    def _generate_emergency_response(self, language: str) -> str:
        """Generate emergency response"""
        responses = {
            'en': """ЁЯЪи MEDICAL EMERGENCY DETECTED ЁЯЪи

Please seek immediate medical attention:
тАв Call emergency services (108/102)
тАв Visit the nearest hospital emergency room
тАв Do not delay medical care

If this is a life-threatening emergency, please hang up and call emergency services immediately.

Stay calm and get professional medical help right away.""",
            
            'hi': """ЁЯЪи рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЖрдкрд╛рддрдХрд╛рд▓ рдХрд╛ рдкрддрд╛ рдЪрд▓рд╛ ЁЯЪи

рдХреГрдкрдпрд╛ рддреБрд░рдВрдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВ:
тАв рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВ (108/102)
тАв рдирд┐рдХрдЯрддрдо рдЕрд╕реНрдкрддрд╛рд▓ рдХреЗ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдХрдХреНрд╖ рдореЗрдВ рдЬрд╛рдПрдВ
тАв рдЪрд┐рдХрд┐рддреНрд╕рд╛ рджреЗрдЦрднрд╛рд▓ рдореЗрдВ рджреЗрд░реА рди рдХрд░реЗрдВ

рдпрджрд┐ рдпрд╣ рдЬреАрд╡рди-рдШрд╛рддрдХ рдЖрдкрд╛рддрдХрд╛рд▓ рд╣реИ, рддреЛ рдХреГрдкрдпрд╛ рдлреЛрди рд░рдЦреЗрдВ рдФрд░ рддреБрд░рдВрдд рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВред

рд╢рд╛рдВрдд рд░рд╣реЗрдВ рдФрд░ рддреБрд░рдВрдд рдкреЗрд╢реЗрд╡рд░ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред"""
        }
        
        return responses.get(language, responses['en'])
    
    def _generate_general_response(self, query: str, language: str) -> str:
        """Generate general medical response"""
        responses = {
            'en': f"""Hello! I'm Dr. Sarvam, your AI medical assistant. I'm here to help you with your health concerns.

I understand you're asking about: "{query}"

To provide you with the best possible guidance, could you please tell me:
1. What specific symptoms are you experiencing?
2. How long have you been experiencing these symptoms?
3. Is there any particular area of concern?

Remember: I can provide general medical information and guidance, but I always recommend consulting with a qualified healthcare professional for proper diagnosis and treatment.

How can I help you today?""",
            
            'hi': f"""рдирдорд╕реНрддреЗ! рдореИрдВ рдбреЙ. рд╕рд░реНрд╡рдо рд╣реВрдВ, рдЖрдкрдХрд╛ AI рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрдХред рдореИрдВ рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛рдУрдВ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред

рдореИрдВ рд╕рдордЭрддрд╛ рд╣реВрдВ рдХрд┐ рдЖрдк рдкреВрдЫ рд░рд╣реЗ рд╣реИрдВ: "{query}"

рдЖрдкрдХреЛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдореБрдЭреЗ рдмрддрд╛рдПрдВ:
1. рдЖрдк рдХрд┐рди рд╡рд┐рд╢рд┐рд╖реНрдЯ рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рдЕрдиреБрднрд╡ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?
2. рдЖрдк рдХрд┐рддрдиреЗ рд╕рдордп рд╕реЗ рдЗрди рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рдЕрдиреБрднрд╡ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?
3. рдХреНрдпрд╛ рдХреЛрдИ рд╡рд┐рд╢реЗрд╖ рдЪрд┐рдВрддрд╛ рдХрд╛ рдХреНрд╖реЗрддреНрд░ рд╣реИ?

рдпрд╛рдж рд░рдЦреЗрдВ: рдореИрдВ рд╕рд╛рдорд╛рдиреНрдп рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЬрд╛рдирдХрд╛рд░реА рдФрд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ, рд▓реЗрдХрд┐рди рдореИрдВ рд╣рдореЗрд╢рд╛ рдЙрдЪрд┐рдд рдирд┐рджрд╛рди рдФрд░ рдЙрдкрдЪрд╛рд░ рдХреЗ рд▓рд┐рдП рдПрдХ рдпреЛрдЧреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реЗрд╡рд╛ рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХрд░рдиреЗ рдХреА рд╕рд▓рд╛рд╣ рджреЗрддрд╛ рд╣реВрдВред

рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?"""
        }
        
        return responses.get(language, responses['en'])
    
    def _generate_symptom_response(self, symptoms: List[str], language: str) -> str:
        """Generate response for specific symptoms"""
        
        # Take the first detected symptom for primary response
        primary_symptom = symptoms[0]
        symptom_info = self.medical_knowledge.get(primary_symptom, {})
        
        if language == 'hi':
            return f"""рдирдорд╕реНрддреЗ! рдореИрдВ рдбреЙ. рд╕рд░реНрд╡рдо рд╣реВрдВред рдореИрдВ рд╕рдордЭрддрд╛ рд╣реВрдВ рдХрд┐ рдЖрдк {primary_symptom} рдХреА рд╕рдорд╕реНрдпрд╛ рд╕реЗ рдкрд░реЗрд╢рд╛рди рд╣реИрдВред

ЁЯФН **рд▓рдХреНрд╖рдг рд╡рд┐рд╢реНрд▓реЗрд╖рдг:**
рдЖрдкрдХреЗ рд╡рд░реНрдгрд┐рдд рд▓рдХреНрд╖рдг рдЖрдорддреМрд░ рдкрд░ рдЗрди рдХрд╛рд░рдгреЛрдВ рд╕реЗ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ: {', '.join(symptom_info.get('causes', ['рд╕рд╛рдорд╛рдиреНрдп рдХрд╛рд░рдг']))}

ЁЯТб **рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣:**
{symptom_info.get('advice', 'рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ рдкрд░реНрдпрд╛рдкреНрдд рдкрд╛рдиреА рдкрд┐рдПрдВ')}

тЪая╕П **рдХрдм рддреБрд░рдВрдд рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ:**
{symptom_info.get('emergency', 'рдпрджрд┐ рд▓рдХреНрд╖рдг рдЧрдВрднреАрд░ рд╣реЛрдВ рдпрд╛ рдмрд┐рдЧрдбрд╝рддреЗ рдЬрд╛рдПрдВ')}

ЁЯУЛ **рдХреБрдЫ рдкреНрд░рд╢реНрди:**
1. рдпреЗ рд▓рдХреНрд╖рдг рдХрдм рд╕реЗ рд╣реИрдВ?
2. рдХреЛрдИ рдЕрдиреНрдп рд▓рдХреНрд╖рдг рднреА рд╣реИрдВ?
3. рдХреНрдпрд╛ рдЖрдк рдХреЛрдИ рджрд╡рд╛ рд▓реЗ рд░рд╣реЗ рд╣реИрдВ?

**рдорд╣рддреНрд╡рдкреВрд░реНрдг:** рдпрд╣ рдХреЗрд╡рд▓ рд╕рд╛рдорд╛рдиреНрдп рдЬрд╛рдирдХрд╛рд░реА рд╣реИред рдХреГрдкрдпрд╛ рдЙрдЪрд┐рдд рдирд┐рджрд╛рди рдФрд░ рдЙрдкрдЪрд╛рд░ рдХреЗ рд▓рд┐рдП рдпреЛрдЧреНрдп рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред

рдХреНрдпрд╛ рдЖрдк рдФрд░ рдХреБрдЫ рдкреВрдЫрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"""

        else:  # English
            return f"""Hello! I'm Dr. Sarvam. I understand you're experiencing {primary_symptom}.

ЁЯФН **Symptom Analysis:**
Your described symptoms could commonly be caused by: {', '.join(symptom_info.get('causes', ['general causes']))}

ЁЯТб **General Advice:**
{symptom_info.get('advice', 'Get rest and stay hydrated')}

тЪая╕П **Seek immediate medical attention if:**
{symptom_info.get('emergency', 'Symptoms are severe or worsening')}

ЁЯУЛ **Follow-up Questions:**
1. How long have you been experiencing these symptoms?
2. Are there any other symptoms?
3. Are you taking any medications?

**Important:** This is general information only. Please consult a qualified healthcare professional for proper diagnosis and treatment.

Is there anything else you'd like to ask?""" 